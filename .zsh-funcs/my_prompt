
local reset white green red yellow
reset="%{${reset_color}%}"
white="%{$fg[white]%}"
green="%{$fg_bold[green]%}"
red="%{$fg[red]%}"
yellow="%{$fg[yellow]%}"

# Set up VCS_INFO
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git*:*' get-revision true
zstyle ':vcs_info:git*:*' check-for-changes true

zstyle ':vcs_info:git*' formats "[${yellow}%r${white}-${green}%b%u%c${reset}]" "%8.8i:${yellow}%S${reset}"
zstyle ':vcs_info:git*' actionformats "[${yellow}%r${white}-${green}%b%u%c${white}|${red}%a${reset}]" "${red}%8.8i${reset}:${yellow}%S${reset}"

zstyle ':vcs_info:git*:*' stagedstr "${green}+${white}"
zstyle ':vcs_info:git*:*' unstagedstr "${red}!${white}"

# zstyle ':vcs_info:*+*:*' debug true

zstyle ':vcs_info:git*+set-message:*' hooks git-st git-stash

# Show remote ref name and number of commits ahead-of or behind
function +vi-git-st() {
    local ahead behind remote
    local -a gitstatus

    # Are we on a remote-tracking branch?
    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
        --symbolic-full-name --abbrev-ref 2>/dev/null)}

    if [[ -n ${remote} ]] ; then
        # for git prior to 1.7
        # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
        ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
        (( $ahead )) && gitstatus+=( "${green}+${ahead}${white}" )

        # for git prior to 1.7
        # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
        behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
        (( $behind )) && gitstatus+=( "${red}-${behind}${white}" )

        hook_com[branch]="${hook_com[branch]} [${remote} ${(j:/:)gitstatus}]"
    fi
}

# Show count of stashed changes
function +vi-git-stash() {
    local -a stashes

    if [[ -s ${hook_com[base]}/.git/refs/stash ]] ; then
        stashes=$(git stash list 2>/dev/null | wc -l)
        hook_com[misc]+=" (${stashes} stashed)"
    fi
}

# Executed before each prompt
function precmd {
    vcs_info
    setprompt
}


# Executed after a command has been read and is to be executed.
# function preexec {
#     # if running gnu screen, set the window name to the last run command
#     # FIXME any way to make this not change certain window titles (by window
#     # number or if a title isn't already set?)
#     if [[ "$TERM" =~ "screen" ]]; then
#         local CMD=${1[(wr)^(*=*|ssh|sudo|-*)]}
#         echo -ne "\ek$CMD\e\\"
#     fi
# }

function setprompt() {
    local infoline

    # first look to see if we're not on the local machine
    [[ -n $SSH_CLIENT ]] && infoline+=( "%m " )

    # add the time
    infoline+=( "%B%t%b" )

    # pull in the git info
    [[ -n ${vcs_info_msg_0_} ]] && infoline+=( " ${vcs_info_msg_0_}" )

    # now the prompt
    infoline+=( "%# ")

    ### Finally, set the prompt
    PROMPT=${infoline}

    # handle the right prompt
    [[ -n ${vcs_info_msg_1_} ]] && RPROMPT=" ${vcs_info_msg_1_}" || RPROMPT=' %h:%B%c%b'
}
